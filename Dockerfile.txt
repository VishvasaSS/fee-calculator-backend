# Stage 1: Build the application
FROM openjdk:17-jdk-slim AS build
# Or if you're using Java 21:
# FROM openjdk:21-jdk-slim AS build

# Set the working directory inside the container
WORKDIR /app

# Copy the Maven wrapper files and the pom.xml first to leverage Docker's caching
# This ensures that if only source code changes, Maven dependencies are not re-downloaded
COPY mvnw .
COPY .mvn .mvn/
COPY pom.xml .

# Download dependencies first (without building the app yet)
# This step is highly cacheable
RUN ./mvnw dependency:go-offline -B

# Copy the rest of the application source code
COPY src src/

# Build the Spring Boot application
# -DskipTests skips tests during the build, useful for faster deployments
# The jar is typically created in target/
RUN ./mvnw clean install -DskipTests

# Stage 2: Create the final running image
FROM openjdk:17-jre-slim
# Or if you're using Java 21:
# FROM openjdk:21-jre-slim

# Set the working directory
WORKDIR /app

# Copy the built JAR file from the build stage
# Assuming your Spring Boot application creates a JAR named like 'fee-calculator-0.0.1-SNAPSHOT.jar'
# Adjust the name if your artifactId or version is different
COPY --from=build /app/target/*.jar app.jar

# Expose the port your Spring Boot application runs on (default is 8080)
EXPOSE 8080

# Command to run the application
ENTRYPOINT ["java", "-jar", "app.jar"]